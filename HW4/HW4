from audioop import reverse
from tkinter import E
from cs515 import map, filter


def dot(L,K):
    #if the list lengths are unequal we return neg inf
    if len(L)!=len(K):
       return float('-inf')
    #if the lengths are both equal to 0 we return 0.0
    if len(L)==0 and len(K)==0:
        return 0.0
    #base case: if the lengths are equal to 1 we multiply the two nums
    if len(L)==1 and len(K)==1:
       return L[0]*K[0]
    #until we fulfill these conditions we will perform 
    #the dot product function for both lists until they are 
    #fully iterated
    else:
        return (L[0]*K[0]) + dot(L[1:],K[1:])
    
print(dot([5],[9]))
print(dot([9,5],[5]))
print(dot([],[]))
print(dot([5,3],[6,4]))

def explode(S):
    #base case is if string has one or less elements 
    if len(S)<=1:
    #we split the string. This turns it into a list
        return S.split()
    #if the string has 2 or more elements we concatenate the 
    #first element to the recursive statement
    else:
        return  S[0].split()+explode(S[1::])
print(explode(""))
print(explode("s"))
print(explode("Roland"))
print(explode("spam"))

def index(e,L):
    #base case is the elemenet is at the first index 
    #or the list is empty
    if (L==[]):
        return 0
    #if these cases are true we return index 0
    if e ==L[0]:
        return 0
    else: 
    #otherwise we increment by 1 over the indexes 
    #starting at the second index in the list 
        return 1+index(e,L[1:])
print(index(42, [ 55, 77, 42, 12, 42, 100 ]))
print(index(42, range(0,100)))
print(index("hi", [ "hello", 42, True ]))
    

#def deep_reverse2(L):
    #return [deep_reverse2(l) if type(l) is list else l for l in reversed(L)]

  
def deepReverse(L):
    newlist = []
    def helper_func(L, newlist):
        #if L is blank return the blank newly created newlist
        if L == []:
            return newlist
        #base case: if the last element is an element in a list then we will begin iterating from the second to last element using [:-1]
        #we will also run deepReverse again on the L[-1] func to check if it's still an element of a list
        if isinstance(L[-1], list):           
            return (helper_func(L[:-1], [deepReverse(L[-1])]))
        #otherwise we will just return the list reverse added into the newlist without having to run deepReverse and use recursion again
        #we will add the newlist to the last element 
        else:    
            return helper_func(L[:-1],  newlist+[L[-1]])
    #we will return the helper_func in order to get the answer now
    return helper_func(L, newlist)
    

print(deepReverse([1,2,3,4]))
print(deepReverse([1,[2,3],4]))
print(deepReverse(([1, [2, [3, 4], [5, [6, 7], 8]]])))
